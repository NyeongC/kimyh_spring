스프링의 진짜 핵심

스프링은 '좋은 객체 지향' 애플리케이션을 개발할 수 있게 도와주는 프레임워크

- 다형성
 
운전자-자동차

운전자는 자동차 역할(interface) 에만 의존

자동차 구현체인(k3,아반떼,테슬라 모델3) 등이 변화된다고 운전자에는 영향이없음

client에 영향이 없음, 역할과 구현을 나눠놨기때문.

객체 설계시 역할(인터페이스)를 먼저 부여하고, 그 역할을 수행하는 구현 객체를 만들기

객체를 설계할 때 역할과 구현을 명확히 분리

스프링과 객체 지향
• 다형성이 가장 중요하다!
• 스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.
• 스프링에서 이야기하는 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과
구현을 편리하게 다룰 수 있도록 지원한다.
• 스프링을 사용하면 마치 레고 블럭 조립하듯이! 공연 무대의 배우를 선택하듯이! 구현을 편
리하게 변경할 수 있다.

SOLID
클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리
• SRP: 단일 책임 원칙(single responsibility principle)
• OCP: 개방-폐쇄 원칙 (Open/closed principle)
• LSP: 리스코프 치환 원칙 (Liskov substitution principle)
• ISP: 인터페이스 분리 원칙 (Interface segregation principle)
• DIP: 의존관계 역전 원칙 (Dependency inversion principle)

- 회원 도메인 설계의 문제점
OCP, DIP을 잘 지키고 있나?

멤버서비스 임플은 어떤 문제가 있냐면
분명 멤버리포지토리 인터페이스를 의존하는데( 이건 오키)
실제 할당하는 부분도 구현체를 의존하고있음 

public class MemberServiceImpl implements MemberService{


    private final MemberRepository memberRepository = new MemoryMemberRepository();

현재 멤버서비스 임플은 memberRepository , new MemoryMemberRepository(); 둘다 의존적임 (추상화, 구체화 둘다)
-> DIP 위반 